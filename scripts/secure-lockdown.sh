#!/bin/bash

# Secure System Lockdown Script
# Blocks specified domains via DNS and restricts incoming traffic to SSH only
# Author: Claude Code
# Version: 1.0

set -e  # Exit on any error

# =============================================================================
# CONFIGURATION
# =============================================================================

# SSH Configuration
SSH_CONFIG_FILE="/etc/ssh/sshd_config"

# Function to get SSH port from sshd_config
get_ssh_port_from_config() {
    local port
    if [[ -f "$SSH_CONFIG_FILE" ]]; then
        # Look for Port directive in sshd_config (case insensitive)
        port=$(grep -i "^[[:space:]]*Port[[:space:]]\+[0-9]\+" "$SSH_CONFIG_FILE" | awk '{print $2}' | head -1)
        if [[ -n "$port" && "$port" =~ ^[0-9]+$ ]]; then
            echo "$port"
            return 0
        fi
    fi
    # Default SSH port if not found or invalid
    echo "8822"
}

# Set SSH port: use environment variable, command line arg, or detect from config
SSH_PORT="${SSH_PORT:-$(get_ssh_port_from_config)}"

# DNS Configuration
DNS_SERVERS=("1.1.1.1" "8.8.8.8" "192.168.1.1")
DNSMASQ_CONFIG="/etc/dnsmasq.conf"
RESOLV_CONFIG="/etc/resolv.conf"

# Domains to block (modify this list as needed)
BLOCKED_DOMAINS=(
    "8slp.net"
    "app-api.8slp.net"
    "app-api.staging.8slp.net"
    "app-media.8slp.net"
    "auth-api.8slp.net"
    "client-api.8slp.net"
    "client-api.staging.8slp.net"
    "device-api-ws.8slp.net"
    "device-api.8slp.net"
    "fw.8slp.net"
    "jira.8slp.net"
    "logs.8slp.net"
    "luna-api.8slp.net"
    "metrics-api.8slp.net"
    "mfg-data-api.8slp.net"
    "ops-api.8slp.net"
    "portal.8slp.net"
    "raw-api-upload.8slp.net"
    "remote-connectivity-api.8slp.net"
    "s.8slp.net"
    "staging-ci.8slp.net"
    "staging.8slp.net"
    "status.8slp.net"
    "trail.8slp.net"
    "update-api.8slp.net"
    "vpn.8slp.net"
    "webauth-api.8slp.net"
    "wifi.8slp.net"
    "www.s.8slp.net"
)

# Backup directory
BACKUP_DIR="/etc/secure-lockdown-backups"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# =============================================================================
# FUNCTIONS
# =============================================================================

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a /var/log/secure-lockdown.log
}

error() {
    echo "[ERROR] $*" >&2
    exit 1
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
    fi
}

check_ssh_port() {
    if ! netstat -tlnp | grep -q ":${SSH_PORT}"; then
        error "SSH is not running on port ${SSH_PORT}. Please verify SSH configuration."
    fi
    log "SSH confirmed running on port ${SSH_PORT}"
}

create_backup_dir() {
    mkdir -p "$BACKUP_DIR"
    log "Created backup directory: $BACKUP_DIR"
}

backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        cp "$file" "${BACKUP_DIR}/$(basename "$file").backup-${TIMESTAMP}"
        log "Backed up: $file"
    fi
}

install_dnsmasq() {
    if ! command -v dnsmasq &> /dev/null; then
        log "Installing dnsmasq..."
        if command -v apt-get &> /dev/null; then
            apt-get update && apt-get install -y dnsmasq
        elif command -v yum &> /dev/null; then
            yum install -y dnsmasq
        elif command -v apk &> /dev/null; then
            apk add dnsmasq
        else
            error "Package manager not found. Please install dnsmasq manually."
        fi
    else
        log "dnsmasq already installed"
    fi
}

configure_dnsmasq() {
    log "Configuring dnsmasq for domain blocking..."

    backup_file "$DNSMASQ_CONFIG"

    # Add domain blocking configuration
    cat >> "$DNSMASQ_CONFIG" << EOF

# =============================================================================
# Secure Lockdown Configuration - Added $(date)
# =============================================================================

# Block specified domains by redirecting to localhost
EOF

    for domain in "${BLOCKED_DOMAINS[@]}"; do
        echo "address=/${domain}/127.0.0.1" >> "$DNSMASQ_CONFIG"
    done

    cat >> "$DNSMASQ_CONFIG" << EOF

# Listen on localhost only
listen-address=127.0.0.1

# Use upstream DNS servers
EOF

    for server in "${DNS_SERVERS[@]}"; do
        echo "server=${server}" >> "$DNSMASQ_CONFIG"
    done

    # Test configuration
    if ! dnsmasq --test; then
        error "dnsmasq configuration test failed"
    fi

    log "dnsmasq configuration completed"
}

configure_dns_resolver() {
    log "Configuring DNS resolver..."

    backup_file "$RESOLV_CONFIG"

    cat > "$RESOLV_CONFIG" << EOF
# Generated by secure-lockdown script - $(date)
search Home
nameserver 127.0.0.1
nameserver 1.1.1.1
nameserver 8.8.8.8
EOF

    log "DNS resolver configured to use dnsmasq"
}

start_dnsmasq() {
    log "Starting and enabling dnsmasq service..."

    systemctl enable dnsmasq
    systemctl restart dnsmasq

    if ! systemctl is-active --quiet dnsmasq; then
        error "Failed to start dnsmasq service"
    fi

    log "dnsmasq service started successfully"
}

test_dns_blocking() {
    log "Testing DNS blocking..."

    # Test that blocked domain resolves to localhost
    local test_domain="${BLOCKED_DOMAINS[1]}"  # Use first specific domain
    local resolved_ip
    resolved_ip=$(nslookup "$test_domain" 127.0.0.1 2>/dev/null | grep -A1 "Name:" | grep "Address" | awk '{print $2}' | head -1)

    if [[ "$resolved_ip" == "127.0.0.1" ]]; then
        log "DNS blocking test PASSED: $test_domain -> $resolved_ip"
    else
        error "DNS blocking test FAILED: $test_domain -> $resolved_ip (expected 127.0.0.1)"
    fi

    # Test that normal domain still works
    local normal_ip
    normal_ip=$(nslookup google.com 127.0.0.1 2>/dev/null | grep -A1 "Name:" | grep "Address" | awk '{print $2}' | head -1)
    if [[ "$normal_ip" != "127.0.0.1" && -n "$normal_ip" ]]; then
        log "DNS resolution test PASSED: google.com -> $normal_ip"
    else
        error "DNS resolution test FAILED: google.com -> $normal_ip"
    fi
}

configure_firewall() {
    log "Configuring firewall rules..."

    # Backup existing rules
    if command -v iptables-save &> /dev/null; then
        iptables-save > "${BACKUP_DIR}/iptables.backup-${TIMESTAMP}"
        log "Backed up existing iptables rules"
    fi

    # Clear existing INPUT rules
    iptables -F INPUT

    # Allow localhost traffic
    iptables -A INPUT -i lo -j ACCEPT

    # Allow private network traffic
    iptables -A INPUT -s 192.168.0.0/16 -j ACCEPT
    iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
    iptables -A INPUT -s 172.16.0.0/12 -j ACCEPT

    # Allow established and related connections
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # Allow SSH on specified port
    iptables -A INPUT -p tcp --dport "$SSH_PORT" -j ACCEPT

    # Drop all other incoming traffic
    iptables -A INPUT -j DROP

    log "Firewall rules configured successfully"
}

save_firewall_rules() {
    log "Saving firewall rules..."

    # Create iptables directory if it doesn't exist
    mkdir -p /etc/iptables

    # Save current rules
    iptables-save > /etc/iptables/rules.v4

    # Try to install iptables-persistent if available
    if command -v apt-get &> /dev/null; then
        if ! dpkg -l | grep -q iptables-persistent; then
            log "Installing iptables-persistent..."
            DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent
        fi
    fi

    log "Firewall rules saved for persistence"
}

test_firewall() {
    log "Testing firewall configuration..."

    # Test SSH connectivity
    if netstat -tlnp | grep -q ":${SSH_PORT}"; then
        log "Firewall test PASSED: SSH port ${SSH_PORT} is accessible"
    else
        error "Firewall test FAILED: SSH port ${SSH_PORT} is not accessible"
    fi

    # Display current rules
    log "Current firewall rules:"
    iptables -L INPUT -n --line-numbers | while read line; do
        log "  $line"
    done
}

create_rollback_script() {
    local rollback_script="${BACKUP_DIR}/rollback-${TIMESTAMP}.sh"

    cat > "$rollback_script" << EOF
#!/bin/bash
# Rollback script created by secure-lockdown.sh on $(date)

set -e

echo "Rolling back secure lockdown configuration..."

# Stop dnsmasq
systemctl stop dnsmasq || true
systemctl disable dnsmasq || true

# Restore backed up files
if [[ -f "${BACKUP_DIR}/dnsmasq.conf.backup-${TIMESTAMP}" ]]; then
    cp "${BACKUP_DIR}/dnsmasq.conf.backup-${TIMESTAMP}" "$DNSMASQ_CONFIG"
    echo "Restored dnsmasq configuration"
fi

if [[ -f "${BACKUP_DIR}/resolv.conf.backup-${TIMESTAMP}" ]]; then
    cp "${BACKUP_DIR}/resolv.conf.backup-${TIMESTAMP}" "$RESOLV_CONFIG"
    echo "Restored DNS resolver configuration"
fi

# Restore iptables rules
if [[ -f "${BACKUP_DIR}/iptables.backup-${TIMESTAMP}" ]]; then
    iptables-restore < "${BACKUP_DIR}/iptables.backup-${TIMESTAMP}"
    echo "Restored iptables rules"
fi

echo "Rollback completed successfully"
echo "You may need to restart networking services manually"
EOF

    chmod +x "$rollback_script"
    log "Created rollback script: $rollback_script"
}

display_summary() {
    echo
    echo "============================================================================="
    echo "                        SECURE LOCKDOWN COMPLETED"
    echo "============================================================================="
    echo
    echo "✅ DNS Blocking:"
    echo "   - Blocked ${#BLOCKED_DOMAINS[@]} domains via dnsmasq"
    echo "   - DNS queries redirected to localhost (127.0.0.1)"
    echo
    echo "✅ Firewall Configuration:"
    echo "   - SSH access maintained on port ${SSH_PORT}"
    echo "   - All incoming traffic blocked except:"
    echo "     • Localhost (127.0.0.1)"
    echo "     • Private networks (10.x.x.x, 172.16.x.x, 192.168.x.x)"
    echo "     • Established/related connections"
    echo "     • SSH on port ${SSH_PORT}"
    echo
    echo "✅ Backup & Recovery:"
    echo "   - Backups stored in: ${BACKUP_DIR}"
    echo "   - Rollback script: ${BACKUP_DIR}/rollback-${TIMESTAMP}.sh"
    echo
    echo "⚠️  IMPORTANT:"
    echo "   - Test SSH connectivity before disconnecting"
    echo "   - Keep rollback script accessible for emergencies"
    echo "   - Configuration persists across reboots"
    echo
    echo "============================================================================="
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    log "Starting secure lockdown process..."
    log "Using SSH port: ${SSH_PORT}"

    # Pre-flight checks
    check_root
    check_ssh_port
    create_backup_dir

    # DNS blocking setup
    install_dnsmasq
    configure_dnsmasq
    configure_dns_resolver
    start_dnsmasq
    test_dns_blocking

    # Firewall setup
    configure_firewall
    save_firewall_rules
    test_firewall

    # Cleanup and documentation
    create_rollback_script
    display_summary

    log "Secure lockdown process completed successfully"
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo "  --ssh-port    SSH port (default: auto-detect from sshd_config, fallback to 8822)"
        echo
        echo "Environment variables:"
        echo "  SSH_PORT      SSH port to allow (default: auto-detect from sshd_config, fallback to 8822)"
        echo
        echo "This script will:"
        echo "  1. Install and configure dnsmasq for DNS blocking"
        echo "  2. Configure firewall to block incoming traffic except SSH"
        echo "  3. Create backups and rollback script"
        echo
        exit 0
        ;;
    --ssh-port)
        SSH_PORT="$2"
        shift 2
        ;;
esac

# Run main function
main "$@"
