/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WaterLevelRouteImport } from './routes/water-level'
import { Route as TemperatureRouteImport } from './routes/temperature'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as BaseControlRouteImport } from './routes/base-control'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SchedulesIndexRouteImport } from './routes/schedules/index'
import { Route as DataIndexRouteImport } from './routes/data/index'
import { Route as SchedulesNewRouteImport } from './routes/schedules/new'
import { Route as SchedulesScheduleIdRouteImport } from './routes/schedules/$scheduleId'
import { Route as DataVitalsRouteImport } from './routes/data/vitals'
import { Route as DataSleepRouteImport } from './routes/data/sleep'
import { Route as DataLogsRouteImport } from './routes/data/logs'
import { Route as DataAmbientLightRouteImport } from './routes/data/ambient-light'

const WaterLevelRoute = WaterLevelRouteImport.update({
  id: '/water-level',
  path: '/water-level',
  getParentRoute: () => rootRouteImport,
} as any)
const TemperatureRoute = TemperatureRouteImport.update({
  id: '/temperature',
  path: '/temperature',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseControlRoute = BaseControlRouteImport.update({
  id: '/base-control',
  path: '/base-control',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesIndexRoute = SchedulesIndexRouteImport.update({
  id: '/schedules/',
  path: '/schedules/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataIndexRoute = DataIndexRouteImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesNewRoute = SchedulesNewRouteImport.update({
  id: '/schedules/new',
  path: '/schedules/new',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesScheduleIdRoute = SchedulesScheduleIdRouteImport.update({
  id: '/schedules/$scheduleId',
  path: '/schedules/$scheduleId',
  getParentRoute: () => rootRouteImport,
} as any)
const DataVitalsRoute = DataVitalsRouteImport.update({
  id: '/data/vitals',
  path: '/data/vitals',
  getParentRoute: () => rootRouteImport,
} as any)
const DataSleepRoute = DataSleepRouteImport.update({
  id: '/data/sleep',
  path: '/data/sleep',
  getParentRoute: () => rootRouteImport,
} as any)
const DataLogsRoute = DataLogsRouteImport.update({
  id: '/data/logs',
  path: '/data/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const DataAmbientLightRoute = DataAmbientLightRouteImport.update({
  id: '/data/ambient-light',
  path: '/data/ambient-light',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/base-control': typeof BaseControlRoute
  '/settings': typeof SettingsRoute
  '/temperature': typeof TemperatureRoute
  '/water-level': typeof WaterLevelRoute
  '/data/ambient-light': typeof DataAmbientLightRoute
  '/data/logs': typeof DataLogsRoute
  '/data/sleep': typeof DataSleepRoute
  '/data/vitals': typeof DataVitalsRoute
  '/schedules/$scheduleId': typeof SchedulesScheduleIdRoute
  '/schedules/new': typeof SchedulesNewRoute
  '/data': typeof DataIndexRoute
  '/schedules': typeof SchedulesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/base-control': typeof BaseControlRoute
  '/settings': typeof SettingsRoute
  '/temperature': typeof TemperatureRoute
  '/water-level': typeof WaterLevelRoute
  '/data/ambient-light': typeof DataAmbientLightRoute
  '/data/logs': typeof DataLogsRoute
  '/data/sleep': typeof DataSleepRoute
  '/data/vitals': typeof DataVitalsRoute
  '/schedules/$scheduleId': typeof SchedulesScheduleIdRoute
  '/schedules/new': typeof SchedulesNewRoute
  '/data': typeof DataIndexRoute
  '/schedules': typeof SchedulesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/base-control': typeof BaseControlRoute
  '/settings': typeof SettingsRoute
  '/temperature': typeof TemperatureRoute
  '/water-level': typeof WaterLevelRoute
  '/data/ambient-light': typeof DataAmbientLightRoute
  '/data/logs': typeof DataLogsRoute
  '/data/sleep': typeof DataSleepRoute
  '/data/vitals': typeof DataVitalsRoute
  '/schedules/$scheduleId': typeof SchedulesScheduleIdRoute
  '/schedules/new': typeof SchedulesNewRoute
  '/data/': typeof DataIndexRoute
  '/schedules/': typeof SchedulesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/base-control'
    | '/settings'
    | '/temperature'
    | '/water-level'
    | '/data/ambient-light'
    | '/data/logs'
    | '/data/sleep'
    | '/data/vitals'
    | '/schedules/$scheduleId'
    | '/schedules/new'
    | '/data'
    | '/schedules'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/base-control'
    | '/settings'
    | '/temperature'
    | '/water-level'
    | '/data/ambient-light'
    | '/data/logs'
    | '/data/sleep'
    | '/data/vitals'
    | '/schedules/$scheduleId'
    | '/schedules/new'
    | '/data'
    | '/schedules'
  id:
    | '__root__'
    | '/'
    | '/base-control'
    | '/settings'
    | '/temperature'
    | '/water-level'
    | '/data/ambient-light'
    | '/data/logs'
    | '/data/sleep'
    | '/data/vitals'
    | '/schedules/$scheduleId'
    | '/schedules/new'
    | '/data/'
    | '/schedules/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BaseControlRoute: typeof BaseControlRoute
  SettingsRoute: typeof SettingsRoute
  TemperatureRoute: typeof TemperatureRoute
  WaterLevelRoute: typeof WaterLevelRoute
  DataAmbientLightRoute: typeof DataAmbientLightRoute
  DataLogsRoute: typeof DataLogsRoute
  DataSleepRoute: typeof DataSleepRoute
  DataVitalsRoute: typeof DataVitalsRoute
  SchedulesScheduleIdRoute: typeof SchedulesScheduleIdRoute
  SchedulesNewRoute: typeof SchedulesNewRoute
  DataIndexRoute: typeof DataIndexRoute
  SchedulesIndexRoute: typeof SchedulesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/water-level': {
      id: '/water-level'
      path: '/water-level'
      fullPath: '/water-level'
      preLoaderRoute: typeof WaterLevelRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/temperature': {
      id: '/temperature'
      path: '/temperature'
      fullPath: '/temperature'
      preLoaderRoute: typeof TemperatureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/base-control': {
      id: '/base-control'
      path: '/base-control'
      fullPath: '/base-control'
      preLoaderRoute: typeof BaseControlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules/': {
      id: '/schedules/'
      path: '/schedules'
      fullPath: '/schedules'
      preLoaderRoute: typeof SchedulesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/': {
      id: '/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules/new': {
      id: '/schedules/new'
      path: '/schedules/new'
      fullPath: '/schedules/new'
      preLoaderRoute: typeof SchedulesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules/$scheduleId': {
      id: '/schedules/$scheduleId'
      path: '/schedules/$scheduleId'
      fullPath: '/schedules/$scheduleId'
      preLoaderRoute: typeof SchedulesScheduleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/vitals': {
      id: '/data/vitals'
      path: '/data/vitals'
      fullPath: '/data/vitals'
      preLoaderRoute: typeof DataVitalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/sleep': {
      id: '/data/sleep'
      path: '/data/sleep'
      fullPath: '/data/sleep'
      preLoaderRoute: typeof DataSleepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/logs': {
      id: '/data/logs'
      path: '/data/logs'
      fullPath: '/data/logs'
      preLoaderRoute: typeof DataLogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/ambient-light': {
      id: '/data/ambient-light'
      path: '/data/ambient-light'
      fullPath: '/data/ambient-light'
      preLoaderRoute: typeof DataAmbientLightRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BaseControlRoute: BaseControlRoute,
  SettingsRoute: SettingsRoute,
  TemperatureRoute: TemperatureRoute,
  WaterLevelRoute: WaterLevelRoute,
  DataAmbientLightRoute: DataAmbientLightRoute,
  DataLogsRoute: DataLogsRoute,
  DataSleepRoute: DataSleepRoute,
  DataVitalsRoute: DataVitalsRoute,
  SchedulesScheduleIdRoute: SchedulesScheduleIdRoute,
  SchedulesNewRoute: SchedulesNewRoute,
  DataIndexRoute: DataIndexRoute,
  SchedulesIndexRoute: SchedulesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
