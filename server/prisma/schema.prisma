// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model sleep_records {
  id                    Int    @id @default(autoincrement())
  side                  String
  entered_bed_at        Int
  left_bed_at           Int
  sleep_period_seconds  Int
  times_exited_bed      Int
  present_intervals     String
  not_present_intervals String

  @@unique([side, entered_bed_at])
  // Create an index on 'side' and 'entered_bed_at'
  @@index([side, entered_bed_at])
}

model vitals {
  id             Int    @id @default(autoincrement())
  side           String
  timestamp      Int // 5-minute interval start (Unix timestamp)
  heart_rate     Float? // Averaged over 5 minutes
  hrv            Float? // Averaged over 5 minutes
  breathing_rate Float? // Averaged over 5 minutes

  @@unique([side, timestamp]) // Ensure no duplicate intervals
  @@index([side, timestamp])
}

model water_level_readings {
  id               Int      @id @default(autoincrement())
  timestamp        Int // Unix timestamp
  raw_level        Float // Raw capwater sensor value
  calibrated_empty Float // Calibrated empty value at time of reading
  calibrated_full  Float // Calibrated full value at time of reading
  is_priming       Boolean  @default(false)
  created_at       DateTime @default(now())

  @@index([timestamp])
}

model leak_alerts {
  id              Int       @id @default(autoincrement())
  timestamp       Int // Unix timestamp when leak was detected
  alert_type      String // "slow_leak", "fast_leak", "sensor_anomaly"
  severity        String // "low", "medium", "high", "critical"
  raw_level_start Float // Raw level at start of detection period
  raw_level_end   Float // Raw level at end of detection period
  hours_tracked   Float // Time period over which the leak was detected
  rate_of_change  Float // Change per hour in raw level units
  dismissed_at    DateTime?
  created_at      DateTime  @default(now())

  @@index([timestamp])
}
